package net.stuarthendren.jung.graph;

import java.util.Collection;
import java.util.HashSet;

import edu.uci.ics.jung.graph.Graph;

/**
 * An induced graph is the subgraph generated by a subset of vertices.
 * 
 * For the graph G(V, E) the induced graph of W < V is the subgraph G(W, F) where F < E and e in E is in F if and only
 * if all vertices incident on e in G(V,E) are contained in W
 * 
 * 
 * @author Stuart Hendren
 * 
 * @param <V>
 * @param <E>
 */
public class StaticInducedGraph<V, E> extends AbstractInducedGraph<V, E> {

	private Collection<E> edges;

	/**
	 * Create the subgraph of <code>graph</code> induces by the <code>vertices</code>. This implementation is not backed
	 * by the input collection and changes in the original collection will <b>not</b> be reflected by changes in the
	 * induced graph
	 * 
	 * @param graph
	 * @param vertices
	 */
	public StaticInducedGraph(Graph<V, E> graph, Collection<V> vertices) {
		super(graph, new HashSet<V>(vertices));
		edges = new HashSet<E>();
		for (V v : this.vertices) {
			for (E e : graph.getIncidentEdges(v)) {
				if (this.vertices.contains(graph.getOpposite(v, e))) {
					edges.add(e);
				}
			}
		}
	}

	@Override
	public Collection<E> getEdges() {
		return edges;
	}

}
